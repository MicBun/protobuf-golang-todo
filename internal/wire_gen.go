// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"context"
	"github.com/MicBun/protobuf-golang-todo/internal/adapter/httpHandler"
	"github.com/MicBun/protobuf-golang-todo/internal/domain/service"
	"github.com/MicBun/protobuf-golang-todo/internal/infra/db"
	"github.com/MicBun/protobuf-golang-todo/internal/infra/echo"
	"github.com/MicBun/protobuf-golang-todo/internal/infra/factory"
	"github.com/MicBun/protobuf-golang-todo/internal/infra/grpc"
	"github.com/MicBun/protobuf-golang-todo/internal/infra/repo"
	"github.com/MicBun/protobuf-golang-todo/internal/infra/route"
)

// Injectors from wire.go:

func InitApp(ctx context.Context) (*App, error) {
	echoEcho := echo.New()
	gormDB, err := db.NewGormDB()
	if err != nil {
		return nil, err
	}
	todo := factory.NewTodo()
	repoTodo := repo.NewTodo(gormDB, todo)
	postgresTransactionManager := db.NewPostgresTransactionManager(gormDB)
	serviceTodo := service.NewTodo(repoTodo, postgresTransactionManager)
	server := grpc.New(serviceTodo)
	httpHandlerTodo := httpHandler.NewTodo(serviceTodo)
	http := route.NewHTTP(httpHandlerTodo)
	app, err := NewApp(echoEcho, server, gormDB, http)
	if err != nil {
		return nil, err
	}
	return app, nil
}
