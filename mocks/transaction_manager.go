// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// TransactionManager is an autogenerated mock type for the TransactionManager type
type TransactionManager struct {
	mock.Mock
}

type TransactionManager_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactionManager) EXPECT() *TransactionManager_Expecter {
	return &TransactionManager_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields: callback
func (_m *TransactionManager) Run(callback func(interface{}) error) error {
	ret := _m.Called(callback)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(interface{}) error) error); ok {
		r0 = rf(callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionManager_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type TransactionManager_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - callback func(interface{}) error
func (_e *TransactionManager_Expecter) Run(callback interface{}) *TransactionManager_Run_Call {
	return &TransactionManager_Run_Call{Call: _e.mock.On("Run", callback)}
}

func (_c *TransactionManager_Run_Call) Run(run func(callback func(interface{}) error)) *TransactionManager_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(interface{}) error))
	})
	return _c
}

func (_c *TransactionManager_Run_Call) Return(_a0 error) *TransactionManager_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TransactionManager_Run_Call) RunAndReturn(run func(func(interface{}) error) error) *TransactionManager_Run_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewTransactionManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionManager creates a new instance of TransactionManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionManager(t mockConstructorTestingTNewTransactionManager) *TransactionManager {
	mock := &TransactionManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
