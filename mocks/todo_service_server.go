// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	pb "github.com/MicBun/protobuf-golang-todo/internal/infra/pb"
	mock "github.com/stretchr/testify/mock"

	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// TodoServiceServer is an autogenerated mock type for the TodoServiceServer type
type TodoServiceServer struct {
	mock.Mock
}

type TodoServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *TodoServiceServer) EXPECT() *TodoServiceServer_Expecter {
	return &TodoServiceServer_Expecter{mock: &_m.Mock}
}

// CreateOne provides a mock function with given fields: _a0, _a1
func (_m *TodoServiceServer) CreateOne(_a0 context.Context, _a1 *pb.CreateOneRequest) (*pb.Todo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateOneRequest) (*pb.Todo, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateOneRequest) *pb.Todo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateOneRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoServiceServer_CreateOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOne'
type TodoServiceServer_CreateOne_Call struct {
	*mock.Call
}

// CreateOne is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pb.CreateOneRequest
func (_e *TodoServiceServer_Expecter) CreateOne(_a0 interface{}, _a1 interface{}) *TodoServiceServer_CreateOne_Call {
	return &TodoServiceServer_CreateOne_Call{Call: _e.mock.On("CreateOne", _a0, _a1)}
}

func (_c *TodoServiceServer_CreateOne_Call) Run(run func(_a0 context.Context, _a1 *pb.CreateOneRequest)) *TodoServiceServer_CreateOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pb.CreateOneRequest))
	})
	return _c
}

func (_c *TodoServiceServer_CreateOne_Call) Return(_a0 *pb.Todo, _a1 error) *TodoServiceServer_CreateOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoServiceServer_CreateOne_Call) RunAndReturn(run func(context.Context, *pb.CreateOneRequest) (*pb.Todo, error)) *TodoServiceServer_CreateOne_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOne provides a mock function with given fields: _a0, _a1
func (_m *TodoServiceServer) DeleteOne(_a0 context.Context, _a1 *wrapperspb.UInt32Value) (*pb.Todo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wrapperspb.UInt32Value) (*pb.Todo, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wrapperspb.UInt32Value) *pb.Todo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wrapperspb.UInt32Value) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoServiceServer_DeleteOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOne'
type TodoServiceServer_DeleteOne_Call struct {
	*mock.Call
}

// DeleteOne is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *wrapperspb.UInt32Value
func (_e *TodoServiceServer_Expecter) DeleteOne(_a0 interface{}, _a1 interface{}) *TodoServiceServer_DeleteOne_Call {
	return &TodoServiceServer_DeleteOne_Call{Call: _e.mock.On("DeleteOne", _a0, _a1)}
}

func (_c *TodoServiceServer_DeleteOne_Call) Run(run func(_a0 context.Context, _a1 *wrapperspb.UInt32Value)) *TodoServiceServer_DeleteOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*wrapperspb.UInt32Value))
	})
	return _c
}

func (_c *TodoServiceServer_DeleteOne_Call) Return(_a0 *pb.Todo, _a1 error) *TodoServiceServer_DeleteOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoServiceServer_DeleteOne_Call) RunAndReturn(run func(context.Context, *wrapperspb.UInt32Value) (*pb.Todo, error)) *TodoServiceServer_DeleteOne_Call {
	_c.Call.Return(run)
	return _c
}

// GetMany provides a mock function with given fields: _a0, _a1
func (_m *TodoServiceServer) GetMany(_a0 context.Context, _a1 *pb.GetManyRequest) (*pb.TodoList, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.TodoList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetManyRequest) (*pb.TodoList, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetManyRequest) *pb.TodoList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.TodoList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetManyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoServiceServer_GetMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMany'
type TodoServiceServer_GetMany_Call struct {
	*mock.Call
}

// GetMany is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pb.GetManyRequest
func (_e *TodoServiceServer_Expecter) GetMany(_a0 interface{}, _a1 interface{}) *TodoServiceServer_GetMany_Call {
	return &TodoServiceServer_GetMany_Call{Call: _e.mock.On("GetMany", _a0, _a1)}
}

func (_c *TodoServiceServer_GetMany_Call) Run(run func(_a0 context.Context, _a1 *pb.GetManyRequest)) *TodoServiceServer_GetMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pb.GetManyRequest))
	})
	return _c
}

func (_c *TodoServiceServer_GetMany_Call) Return(_a0 *pb.TodoList, _a1 error) *TodoServiceServer_GetMany_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoServiceServer_GetMany_Call) RunAndReturn(run func(context.Context, *pb.GetManyRequest) (*pb.TodoList, error)) *TodoServiceServer_GetMany_Call {
	_c.Call.Return(run)
	return _c
}

// GetOne provides a mock function with given fields: _a0, _a1
func (_m *TodoServiceServer) GetOne(_a0 context.Context, _a1 *wrapperspb.UInt32Value) (*pb.Todo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wrapperspb.UInt32Value) (*pb.Todo, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wrapperspb.UInt32Value) *pb.Todo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wrapperspb.UInt32Value) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoServiceServer_GetOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOne'
type TodoServiceServer_GetOne_Call struct {
	*mock.Call
}

// GetOne is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *wrapperspb.UInt32Value
func (_e *TodoServiceServer_Expecter) GetOne(_a0 interface{}, _a1 interface{}) *TodoServiceServer_GetOne_Call {
	return &TodoServiceServer_GetOne_Call{Call: _e.mock.On("GetOne", _a0, _a1)}
}

func (_c *TodoServiceServer_GetOne_Call) Run(run func(_a0 context.Context, _a1 *wrapperspb.UInt32Value)) *TodoServiceServer_GetOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*wrapperspb.UInt32Value))
	})
	return _c
}

func (_c *TodoServiceServer_GetOne_Call) Return(_a0 *pb.Todo, _a1 error) *TodoServiceServer_GetOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoServiceServer_GetOne_Call) RunAndReturn(run func(context.Context, *wrapperspb.UInt32Value) (*pb.Todo, error)) *TodoServiceServer_GetOne_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOne provides a mock function with given fields: _a0, _a1
func (_m *TodoServiceServer) UpdateOne(_a0 context.Context, _a1 *pb.UpdateOneRequest) (*pb.Todo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateOneRequest) (*pb.Todo, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateOneRequest) *pb.Todo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpdateOneRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoServiceServer_UpdateOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOne'
type TodoServiceServer_UpdateOne_Call struct {
	*mock.Call
}

// UpdateOne is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pb.UpdateOneRequest
func (_e *TodoServiceServer_Expecter) UpdateOne(_a0 interface{}, _a1 interface{}) *TodoServiceServer_UpdateOne_Call {
	return &TodoServiceServer_UpdateOne_Call{Call: _e.mock.On("UpdateOne", _a0, _a1)}
}

func (_c *TodoServiceServer_UpdateOne_Call) Run(run func(_a0 context.Context, _a1 *pb.UpdateOneRequest)) *TodoServiceServer_UpdateOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pb.UpdateOneRequest))
	})
	return _c
}

func (_c *TodoServiceServer_UpdateOne_Call) Return(_a0 *pb.Todo, _a1 error) *TodoServiceServer_UpdateOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoServiceServer_UpdateOne_Call) RunAndReturn(run func(context.Context, *pb.UpdateOneRequest) (*pb.Todo, error)) *TodoServiceServer_UpdateOne_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedTodoServiceServer provides a mock function with given fields:
func (_m *TodoServiceServer) mustEmbedUnimplementedTodoServiceServer() {
	_m.Called()
}

// TodoServiceServer_mustEmbedUnimplementedTodoServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedTodoServiceServer'
type TodoServiceServer_mustEmbedUnimplementedTodoServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedTodoServiceServer is a helper method to define mock.On call
func (_e *TodoServiceServer_Expecter) mustEmbedUnimplementedTodoServiceServer() *TodoServiceServer_mustEmbedUnimplementedTodoServiceServer_Call {
	return &TodoServiceServer_mustEmbedUnimplementedTodoServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedTodoServiceServer")}
}

func (_c *TodoServiceServer_mustEmbedUnimplementedTodoServiceServer_Call) Run(run func()) *TodoServiceServer_mustEmbedUnimplementedTodoServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TodoServiceServer_mustEmbedUnimplementedTodoServiceServer_Call) Return() *TodoServiceServer_mustEmbedUnimplementedTodoServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *TodoServiceServer_mustEmbedUnimplementedTodoServiceServer_Call) RunAndReturn(run func()) *TodoServiceServer_mustEmbedUnimplementedTodoServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewTodoServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewTodoServiceServer creates a new instance of TodoServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTodoServiceServer(t mockConstructorTestingTNewTodoServiceServer) *TodoServiceServer {
	mock := &TodoServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
