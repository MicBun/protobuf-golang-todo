// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/MicBun/protobuf-golang-todo/internal/infra/pb"

	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// TodoServiceClient is an autogenerated mock type for the TodoServiceClient type
type TodoServiceClient struct {
	mock.Mock
}

type TodoServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *TodoServiceClient) EXPECT() *TodoServiceClient_Expecter {
	return &TodoServiceClient_Expecter{mock: &_m.Mock}
}

// CreateOne provides a mock function with given fields: ctx, in, opts
func (_m *TodoServiceClient) CreateOne(ctx context.Context, in *pb.CreateOneRequest, opts ...grpc.CallOption) (*pb.Todo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateOneRequest, ...grpc.CallOption) (*pb.Todo, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateOneRequest, ...grpc.CallOption) *pb.Todo); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateOneRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoServiceClient_CreateOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOne'
type TodoServiceClient_CreateOne_Call struct {
	*mock.Call
}

// CreateOne is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pb.CreateOneRequest
//   - opts ...grpc.CallOption
func (_e *TodoServiceClient_Expecter) CreateOne(ctx interface{}, in interface{}, opts ...interface{}) *TodoServiceClient_CreateOne_Call {
	return &TodoServiceClient_CreateOne_Call{Call: _e.mock.On("CreateOne",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *TodoServiceClient_CreateOne_Call) Run(run func(ctx context.Context, in *pb.CreateOneRequest, opts ...grpc.CallOption)) *TodoServiceClient_CreateOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*pb.CreateOneRequest), variadicArgs...)
	})
	return _c
}

func (_c *TodoServiceClient_CreateOne_Call) Return(_a0 *pb.Todo, _a1 error) *TodoServiceClient_CreateOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoServiceClient_CreateOne_Call) RunAndReturn(run func(context.Context, *pb.CreateOneRequest, ...grpc.CallOption) (*pb.Todo, error)) *TodoServiceClient_CreateOne_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOne provides a mock function with given fields: ctx, in, opts
func (_m *TodoServiceClient) DeleteOne(ctx context.Context, in *wrapperspb.UInt32Value, opts ...grpc.CallOption) (*pb.Todo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wrapperspb.UInt32Value, ...grpc.CallOption) (*pb.Todo, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wrapperspb.UInt32Value, ...grpc.CallOption) *pb.Todo); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wrapperspb.UInt32Value, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoServiceClient_DeleteOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOne'
type TodoServiceClient_DeleteOne_Call struct {
	*mock.Call
}

// DeleteOne is a helper method to define mock.On call
//   - ctx context.Context
//   - in *wrapperspb.UInt32Value
//   - opts ...grpc.CallOption
func (_e *TodoServiceClient_Expecter) DeleteOne(ctx interface{}, in interface{}, opts ...interface{}) *TodoServiceClient_DeleteOne_Call {
	return &TodoServiceClient_DeleteOne_Call{Call: _e.mock.On("DeleteOne",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *TodoServiceClient_DeleteOne_Call) Run(run func(ctx context.Context, in *wrapperspb.UInt32Value, opts ...grpc.CallOption)) *TodoServiceClient_DeleteOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*wrapperspb.UInt32Value), variadicArgs...)
	})
	return _c
}

func (_c *TodoServiceClient_DeleteOne_Call) Return(_a0 *pb.Todo, _a1 error) *TodoServiceClient_DeleteOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoServiceClient_DeleteOne_Call) RunAndReturn(run func(context.Context, *wrapperspb.UInt32Value, ...grpc.CallOption) (*pb.Todo, error)) *TodoServiceClient_DeleteOne_Call {
	_c.Call.Return(run)
	return _c
}

// GetMany provides a mock function with given fields: ctx, in, opts
func (_m *TodoServiceClient) GetMany(ctx context.Context, in *pb.GetManyRequest, opts ...grpc.CallOption) (*pb.TodoList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.TodoList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetManyRequest, ...grpc.CallOption) (*pb.TodoList, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetManyRequest, ...grpc.CallOption) *pb.TodoList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.TodoList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetManyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoServiceClient_GetMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMany'
type TodoServiceClient_GetMany_Call struct {
	*mock.Call
}

// GetMany is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pb.GetManyRequest
//   - opts ...grpc.CallOption
func (_e *TodoServiceClient_Expecter) GetMany(ctx interface{}, in interface{}, opts ...interface{}) *TodoServiceClient_GetMany_Call {
	return &TodoServiceClient_GetMany_Call{Call: _e.mock.On("GetMany",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *TodoServiceClient_GetMany_Call) Run(run func(ctx context.Context, in *pb.GetManyRequest, opts ...grpc.CallOption)) *TodoServiceClient_GetMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*pb.GetManyRequest), variadicArgs...)
	})
	return _c
}

func (_c *TodoServiceClient_GetMany_Call) Return(_a0 *pb.TodoList, _a1 error) *TodoServiceClient_GetMany_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoServiceClient_GetMany_Call) RunAndReturn(run func(context.Context, *pb.GetManyRequest, ...grpc.CallOption) (*pb.TodoList, error)) *TodoServiceClient_GetMany_Call {
	_c.Call.Return(run)
	return _c
}

// GetOne provides a mock function with given fields: ctx, in, opts
func (_m *TodoServiceClient) GetOne(ctx context.Context, in *wrapperspb.UInt32Value, opts ...grpc.CallOption) (*pb.Todo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wrapperspb.UInt32Value, ...grpc.CallOption) (*pb.Todo, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wrapperspb.UInt32Value, ...grpc.CallOption) *pb.Todo); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wrapperspb.UInt32Value, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoServiceClient_GetOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOne'
type TodoServiceClient_GetOne_Call struct {
	*mock.Call
}

// GetOne is a helper method to define mock.On call
//   - ctx context.Context
//   - in *wrapperspb.UInt32Value
//   - opts ...grpc.CallOption
func (_e *TodoServiceClient_Expecter) GetOne(ctx interface{}, in interface{}, opts ...interface{}) *TodoServiceClient_GetOne_Call {
	return &TodoServiceClient_GetOne_Call{Call: _e.mock.On("GetOne",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *TodoServiceClient_GetOne_Call) Run(run func(ctx context.Context, in *wrapperspb.UInt32Value, opts ...grpc.CallOption)) *TodoServiceClient_GetOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*wrapperspb.UInt32Value), variadicArgs...)
	})
	return _c
}

func (_c *TodoServiceClient_GetOne_Call) Return(_a0 *pb.Todo, _a1 error) *TodoServiceClient_GetOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoServiceClient_GetOne_Call) RunAndReturn(run func(context.Context, *wrapperspb.UInt32Value, ...grpc.CallOption) (*pb.Todo, error)) *TodoServiceClient_GetOne_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOne provides a mock function with given fields: ctx, in, opts
func (_m *TodoServiceClient) UpdateOne(ctx context.Context, in *pb.UpdateOneRequest, opts ...grpc.CallOption) (*pb.Todo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateOneRequest, ...grpc.CallOption) (*pb.Todo, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateOneRequest, ...grpc.CallOption) *pb.Todo); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpdateOneRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoServiceClient_UpdateOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOne'
type TodoServiceClient_UpdateOne_Call struct {
	*mock.Call
}

// UpdateOne is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pb.UpdateOneRequest
//   - opts ...grpc.CallOption
func (_e *TodoServiceClient_Expecter) UpdateOne(ctx interface{}, in interface{}, opts ...interface{}) *TodoServiceClient_UpdateOne_Call {
	return &TodoServiceClient_UpdateOne_Call{Call: _e.mock.On("UpdateOne",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *TodoServiceClient_UpdateOne_Call) Run(run func(ctx context.Context, in *pb.UpdateOneRequest, opts ...grpc.CallOption)) *TodoServiceClient_UpdateOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*pb.UpdateOneRequest), variadicArgs...)
	})
	return _c
}

func (_c *TodoServiceClient_UpdateOne_Call) Return(_a0 *pb.Todo, _a1 error) *TodoServiceClient_UpdateOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoServiceClient_UpdateOne_Call) RunAndReturn(run func(context.Context, *pb.UpdateOneRequest, ...grpc.CallOption) (*pb.Todo, error)) *TodoServiceClient_UpdateOne_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewTodoServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewTodoServiceClient creates a new instance of TodoServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTodoServiceClient(t mockConstructorTestingTNewTodoServiceClient) *TodoServiceClient {
	mock := &TodoServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
